# $HOME/.bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Session safe ssh-agent
test=`/bin/ps -ef | /bin/grep ssh-agent | /bin/grep -v grep  | /bin/awk '{print $2}' | xargs`

if [ "$test" = "" ]; then
   # there is no agent running
   if [ -e "$HOME/agent.sh" ]; then
      # remove the old file
      /bin/rm -f $HOME/agent.sh
   fi;
   # start a new agent
   /usr/bin/ssh-agent | /bin/grep -v echo >&$HOME/agent.sh
fi;

test -e $HOME/agent.sh && source $HOME/agent.sh

alias kagent="kill -9 $SSH_AGENT_PID"

# @epeli's super prompt (@epeli thanks https://gist.github.com/634750)

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

function generate_git_bar {
  git_status="$(git status 2> /dev/null)"
  branch_pattern="^# On branch ([^${IFS}]*)"
  detached_branch_pattern="# Not currently on any branch"
  remote_pattern="# Your branch is (.*) of"
  diverge_pattern="# Your branch and (.*) have diverged"

  if [[
    ${git_status}} =~ "Changed but not updated" || \
    ${git_status}} =~ "Changes not staged for commit" || \
    ${git_status}} =~ "Changes to be committed" # Old git?
  ]]; then
    state="${RED}⚡"
  fi

  if [[ ${git_status}} =~ "Untracked files" ]]; then
    state="${state}${RED}?"
  fi

  # add an else if or two here if you want to get more specific
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="${YELLOW}↑"
    else
      remote="${YELLOW}↓"
    fi
  fi
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="${YELLOW}↕"
  fi
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
    branch="${YELLOW}NO BRANCH"
  fi

  echo "${BLUE}(${branch}${s}${remote}${state}${BLUE})"
}

function generate_hg_bar {
  hg_status="$(hg status 2> /dev/null)"
  hg_summary="$(hg summary 2> /dev/null)"
  branch_pattern="branch: ([^${IFS}]*)"

  if [[
    # if [ $? -eq 0 ]; then
    ${hg_status} =~ "M " || \
    ${hg_status} =~ "A " || \
    ${hg_status} =~ "R " || \
    ${hg_status} =~ "C " || \
    ${hg_status} =~ "! " || \
    ${hg_status} =~ "I "
  ]]; then
    state="${RED}⚡"
  fi

  if [[ ${hg_status} =~ "\? " ]]; then
    state="${state}${RED}?"
  fi

  if [[ ${hg_summary} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  echo "${BLUE}(${branch}${s}${state}${BLUE})"
}

function prompt_func() {

  # <user>@<host> <current working directory>
  if [ "$VIRTUAL_ENV" = "" ]; then
    TITLEBAR="\n${GREEN}\u@\h ${YELLOW}\w"
  else
    TITLEBAR="\n${GREEN}\u@\h ${BLUE}(`basename $VIRTUAL_ENV`) ${YELLOW}\w"
  fi

  # Use red # as prompt char when root
  if [ $(id -u) -eq 0 ]; then
    PROMPT_CHAR="${RED}# ${COLOR_NONE}"
  else
    PROMPT_CHAR="${COLOR_NONE}$ "
  fi

  git rev-parse --git-dir > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    # In Git repo
    PS1="${TITLEBAR}\n$(generate_git_bar)${PROMPT_CHAR}"
  else
    hg status > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      # In hg repo
      PS1="${TITLEBAR}\n$(generate_hg_bar)${PROMPT_CHAR}"
    else
      # Normal directory
      PS1="${TITLEBAR}\n${PROMPT_CHAR}"
    fi
  fi

}

PROMPT_COMMAND=prompt_func

# Variables and aliases
export TERM=xterm-256color
export EDITOR=vim
export LYNX_CFG=$HOME/.lynxcfg
export HG_SETUPTOOLS_FORCE_CMD=true
alias vi=vim
alias tags="bin/tags -v -l Python"
alias startXvfb="export DISPLAY=:99.0 && Xvfb :99 -screen 0 1024x768x16"
function hglog() { hg log --template "- {desc}\n  [{author|person}]\n" -r tip:"`hg tags|head -n 2|tail -n 1|grep -o '^\S*'`";}
function gitlog() { git log --pretty=format:"- %s%n  [%an]" "`git describe --tags|grep -o '^[^-]*'`"..HEAD; }
# export DISPLAY=:99.0

# Virtualenvwrapper
export WORKON_HOME=$HOME/env
export PROJECT_HOME=$HOME/work
source /usr/bin/virtualenvwrapper.sh

#Disable terminal flow control
if [ -t 0 ]; then  # only run if stdin is a terminal
  stty -ixon
fi

# tmux
source $HOME/.vim/others/bash_completion_tmux.sh

# Path
if [ -d ~/.vim/bin ] ; then
    PATH=~/.vim/bin:"${PATH}"
fi
if [ -d ~/bin ] ; then
    PATH=~/bin:"${PATH}"
fi
if [ -d ~/apps/bin ] ; then
    PATH=~/apps/bin:"${PATH}"
fi

# Ruby
PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
if [ -t 0 ]; then  # only run if stdin is a terminal
  rvm use 1.9.2
fi

# Misc functions
corejett(){
xsltproc src/corejet.core/corejet/core/xslt/corejet-to-python.xsl parts/test/corejet/corejet.xml
}

dot2pdf(){
dot -Tps $1|ps2pdf -
}
